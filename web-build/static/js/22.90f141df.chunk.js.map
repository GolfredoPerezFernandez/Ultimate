{"version":3,"sources":["node_modules/@web3auth/openlogin-adapter/dist/openloginAdapter.esm.js"],"names":["getOpenloginDefaultOptions","chainNamespace","chainId","adapterSettings","network","MAINNET","clientId","uxMode","POPUP","chainConfig","loginSettings","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","OpenloginAdapter","params","_params$chainConfig","_params$chainConfig2","_params$chainConfig3","super","this","OPENLOGIN","MULTICHAIN","IN_APP","NOT_READY","EIP155","debug","defaultOptions","openloginOptions","_params$chainConfig4","currentChainNamespace","defaultChainIdConfig","rpcTarget","OTHER","invalidParams","_this$privKeyProvider","privKeyProvider","provider","_","Error","options","_this$openloginOption","checkInitializationRequirements","isRedirectResult","REDIRECT","redirectResult","_pid","replaceUrlOnRedirect","openloginInstance","init","status","READY","emit","privKey","autoConnect","connect","error","checkConnectionRequirements","CONNECTING","adapter","connectWithProvider","ERRORED","message","includes","popupClosed","connectionError","undefined","cleanup","CONNECTED","notConnectedError","notReady","logout","DISCONNECTED","getUserInfo","customChainConfig","setChainConfig","SOLANA","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","concat","_params$extraLoginOpt","curve","ED25519","SECP256K1","login","loginProvider","extraLoginOptions","login_hint","finalPrivKey","getED25519Key","sk","toString","setupProvider","reconnected"],"mappings":"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","file":"static/js/22.90f141df.chunk.js","sourcesContent":["import OpenLogin, { OPENLOGIN_NETWORK, UX_MODE, getHashQueryParams, SUPPORTED_KEY_CURVES } from '@toruslabs/openlogin';\nimport { getChainConfig, BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, CHAIN_NAMESPACES, log, WalletInitializationError, ADAPTER_EVENTS, WalletLoginError } from '@web3auth/base';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { CommonPrivateKeyProvider } from '@web3auth/base-provider';\nimport merge from 'lodash.merge';\n\nconst getOpenloginDefaultOptions = (chainNamespace, chainId) => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : null,\n    loginSettings: {}\n  };\n};\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass OpenloginAdapter extends BaseAdapter {\n  constructor(params) {\n    var _params$chainConfig, _params$chainConfig2, _params$chainConfig3;\n\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.OPENLOGIN);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.MULTICHAIN);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.IN_APP);\n\n    _defineProperty(this, \"openloginInstance\", null);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"openloginOptions\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"privKeyProvider\", null);\n\n    log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);\n    this.openloginOptions = _objectSpread(_objectSpread({\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET\n    }, defaultOptions.adapterSettings), params.adapterSettings || {});\n    this.loginSettings = _objectSpread(_objectSpread({}, defaultOptions.loginSettings), params.loginSettings); // if no chainNamespace is passed then chain config should be set before calling init\n\n    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace) {\n      var _params$chainConfig4;\n\n      this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = _objectSpread(_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);\n      log.debug(\"const openlogin chainConfig\", this.chainConfig);\n\n      if (!this.chainConfig.rpcTarget && params.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n\n  get chainConfigProxy() {\n    return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;\n  }\n\n  get provider() {\n    var _this$privKeyProvider;\n\n    return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    var _this$openloginOption;\n\n    super.checkInitializationRequirements();\n    if (!((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.clientId)) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    let isRedirectResult = false;\n\n    if (this.openloginOptions.uxMode === UX_MODE.REDIRECT) {\n      const redirectResult = getHashQueryParams();\n\n      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n        isRedirectResult = true;\n      }\n    }\n\n    this.openloginOptions = _objectSpread(_objectSpread({}, this.openloginOptions), {}, {\n      replaceUrlOnRedirect: isRedirectResult\n    });\n    this.openloginInstance = new OpenLogin(this.openloginOptions);\n    log.debug(\"initializing openlogin adapter init\");\n    await this.openloginInstance.init();\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      log.debug(\"initializing openlogin adapter\"); // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params) {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {\n      adapter: WALLET_ADAPTERS.OPENLOGIN\n    }));\n\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error) {\n      log.error(\"Failed to connect with openlogin provider\", error); // ready again to be connected\n\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n\n      if (error !== null && error !== void 0 && error.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  } // should be called only before initialization.\n\n\n  setAdapterSettings(adapterSettings) {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions.adapterSettings), this.openloginOptions || {}), adapterSettings);\n  } // should be called only before initialization.\n\n\n  setChainConfig(customChainConfig) {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n\n  async connectWithProvider(params) {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const {\n        SolanaPrivateKeyProvider\n      } = await import('@web3auth/solana-provider');\n      this.privKeyProvider = new SolanaPrivateKeyProvider({\n        config: {\n          chainConfig: this.chainConfig\n        }\n      });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const {\n        EthereumPrivateKeyProvider\n      } = await import('@web3auth/ethereum-provider');\n      this.privKeyProvider = new EthereumPrivateKeyProvider({\n        config: {\n          chainConfig: this.chainConfig\n        }\n      });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.privKeyProvider = new CommonPrivateKeyProvider();\n    } else {\n      throw new Error(\"Invalid chainNamespace: \".concat(this.currentChainNamespace, \" found while connecting to wallet\"));\n    } // if not logged in then login\n\n\n    if (!this.openloginInstance.privKey && params) {\n      var _params$extraLoginOpt;\n\n      if (!this.loginSettings.curve) {\n        this.loginSettings.curve = this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n      }\n\n      await this.openloginInstance.login(merge(this.loginSettings, {\n        loginProvider: params.loginProvider\n      }, {\n        extraLoginOptions: _objectSpread(_objectSpread({}, params.extraLoginOptions || {}), {}, {\n          login_hint: params.login_hint || ((_params$extraLoginOpt = params.extraLoginOptions) === null || _params$extraLoginOpt === void 0 ? void 0 : _params$extraLoginOpt.login_hint)\n        })\n      }));\n    }\n\n    let finalPrivKey = this.openloginInstance.privKey;\n\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const {\n          getED25519Key\n        } = await import('@toruslabs/openlogin-ed25519');\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.OPENLOGIN,\n        reconnected: !params\n      });\n    }\n  }\n\n}\n\nexport { OpenloginAdapter, getOpenloginDefaultOptions };\n//# sourceMappingURL=openloginAdapter.esm.js.map\n"],"sourceRoot":""}