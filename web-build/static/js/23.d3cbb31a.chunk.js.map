{"version":3,"sources":["node_modules/@web3auth/metamask-adapter/dist/metamaskAdapter.esm.js"],"names":["MetamaskAdapter","adapterOptions","arguments","length","undefined","super","this","EIP155","EXTERNAL","METAMASK","NOT_READY","chainConfig","status","CONNECTED","metamaskProvider","_","Error","options","checkInitializationRequirements","mustBeMetaMask","notInstalled","READY","emit","debug","autoConnect","rehydrated","connect","error","ERRORED","checkConnectionRequirements","CONNECTING","adapter","notConnectedError","request","method","chainId","switchChain","provider","once","disconnect","reconnected","connectionError","_this$provider","cleanup","disconnectionError","removeAllListeners","DISCONNECTED","params","switchError","code","chainName","displayName","rpcUrls","rpcTarget"],"mappings":"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","file":"static/js/23.d3cbb31a.chunk.js","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { BaseAdapter, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, log, getChainConfig, WalletLoginError } from '@web3auth/base';\n\nclass MetamaskAdapter extends BaseAdapter {\n  constructor() {\n    let adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"metamaskProvider\", null);\n\n    this.chainConfig = adapterOptions.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n\n    try {\n      log.debug(\"initializing metamask adapter\");\n\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(_) {}\n\n  async connect() {\n    super.checkConnectionRequirements(); // set default to mainnet\n\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n\n      if (chainId !== this.chainConfig.chainId) {\n        await this.switchChain(this.chainConfig);\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect() {\n    var _this$provider;\n\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async switchChain(chainConfig) {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId\n        }]\n      });\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (switchError.code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId: chainConfig.chainId,\n            chainName: chainConfig.displayName,\n            rpcUrls: [chainConfig.rpcTarget]\n          }]\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n\n}\n\nexport { MetamaskAdapter };\n//# sourceMappingURL=metamaskAdapter.esm.js.map\n"],"sourceRoot":""}