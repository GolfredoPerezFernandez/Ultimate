(this.webpackJsonp=this.webpackJsonp||[]).push([[22],{1694:function(i,n){},1974:function(i,n,t){"use strict";t.r(n),t.d(n,"OpenloginAdapter",(function(){return d})),t.d(n,"getOpenloginDefaultOptions",(function(){return l}));var e=t(243),o=t(8),r=t(9),s=t.n(r),a=t(1723),c=t(165),h=t.n(c);const l=(i,n)=>({adapterSettings:{network:e.b.MAINNET,clientId:"",uxMode:e.d.POPUP},chainConfig:i?Object(o.n)(i,n):null,loginSettings:{}});function p(i,n){var t=Object.keys(i);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(i);n&&(e=e.filter((function(n){return Object.getOwnPropertyDescriptor(i,n).enumerable}))),t.push.apply(t,e)}return t}function g(i){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){s()(i,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(i,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(i,n,Object.getOwnPropertyDescriptor(t,n))}))}return i}class d extends o.e{constructor(i){var n,t,r;super(),s()(this,"name",o.j.OPENLOGIN),s()(this,"adapterNamespace",o.c.MULTICHAIN),s()(this,"type",o.a.IN_APP),s()(this,"openloginInstance",null),s()(this,"status",o.d.NOT_READY),s()(this,"currentChainNamespace",o.g.EIP155),s()(this,"openloginOptions",void 0),s()(this,"loginSettings",{}),s()(this,"privKeyProvider",null),o.p.debug("const openlogin adapter",i);const a=l(null===(n=i.chainConfig)||void 0===n?void 0:n.chainNamespace,null===(t=i.chainConfig)||void 0===t?void 0:t.chainId);if(this.openloginOptions=g(g({clientId:"",network:e.b.MAINNET},a.adapterSettings),i.adapterSettings||{}),this.loginSettings=g(g({},a.loginSettings),i.loginSettings),null!==(r=i.chainConfig)&&void 0!==r&&r.chainNamespace){var c;this.currentChainNamespace=null===(c=i.chainConfig)||void 0===c?void 0:c.chainNamespace;const n=a.chainConfig?a.chainConfig:{};if(this.chainConfig=g(g({},n),null===i||void 0===i?void 0:i.chainConfig),o.p.debug("const openlogin chainConfig",this.chainConfig),!this.chainConfig.rpcTarget&&i.chainConfig.chainNamespace!==o.g.OTHER)throw o.k.invalidParams("rpcTarget is required in chainConfig")}}get chainConfigProxy(){return this.chainConfig?g({},this.chainConfig):null}get provider(){var i;return(null===(i=this.privKeyProvider)||void 0===i?void 0:i.provider)||null}set provider(i){throw new Error("Not implemented")}async init(i){var n;if(super.checkInitializationRequirements(),null===(n=this.openloginOptions)||void 0===n||!n.clientId)throw o.k.invalidParams("clientId is required before openlogin's initialization");if(!this.chainConfig)throw o.k.invalidParams("chainConfig is required before initialization");let t=!1;if(this.openloginOptions.uxMode===e.d.REDIRECT){const i=Object(e.f)();Object.keys(i).length>0&&i._pid&&(t=!0)}this.openloginOptions=g(g({},this.openloginOptions),{},{replaceUrlOnRedirect:t}),this.openloginInstance=new e.e(this.openloginOptions),o.p.debug("initializing openlogin adapter init"),await this.openloginInstance.init(),this.status=o.d.READY,this.emit(o.b.READY,o.j.OPENLOGIN);try{o.p.debug("initializing openlogin adapter"),this.openloginInstance.privKey&&(i.autoConnect||t)&&await this.connect()}catch(r){o.p.error("Failed to connect with cached openlogin provider",r),this.emit("ERRORED",r)}}async connect(i){super.checkConnectionRequirements(),this.status=o.d.CONNECTING,this.emit(o.b.CONNECTING,g(g({},i),{},{adapter:o.j.OPENLOGIN}));try{return await this.connectWithProvider(i),this.provider}catch(n){if(o.p.error("Failed to connect with openlogin provider",n),this.status=o.d.READY,this.emit(o.b.ERRORED,n),null!==n&&void 0!==n&&n.message.includes("user closed popup"))throw o.l.popupClosed();throw o.l.connectionError("Failed to login with openlogin")}}async disconnect(){let i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};if(this.status!==o.d.CONNECTED)throw o.l.notConnectedError("Not connected with wallet");if(!this.openloginInstance)throw o.k.notReady("openloginInstance is not ready");await this.openloginInstance.logout(),i.cleanup?(this.status=o.d.NOT_READY,this.openloginInstance=null,this.privKeyProvider=null):this.status=o.d.READY,this.emit(o.b.DISCONNECTED)}async getUserInfo(){if(this.status!==o.d.CONNECTED)throw o.l.notConnectedError("Not connected with wallet");if(!this.openloginInstance)throw o.k.notReady("openloginInstance is not ready");return await this.openloginInstance.getUserInfo()}setAdapterSettings(i){if(this.status===o.d.READY)return;const n=l();this.openloginOptions=g(g(g({},n.adapterSettings),this.openloginOptions||{}),i)}setChainConfig(i){super.setChainConfig(i),this.currentChainNamespace=i.chainNamespace}async connectWithProvider(i){if(!this.chainConfig)throw o.k.invalidParams("chainConfig is required before initialization");if(!this.openloginInstance)throw o.k.notReady("openloginInstance is not ready");if(this.currentChainNamespace===o.g.SOLANA){const{SolanaPrivateKeyProvider:i}=await Promise.all([t.e(1),t.e(2),t.e(17)]).then(t.bind(null,1722));this.privKeyProvider=new i({config:{chainConfig:this.chainConfig}})}else if(this.currentChainNamespace===o.g.EIP155){const{EthereumPrivateKeyProvider:i}=await Promise.all([t.e(3),t.e(16)]).then(t.bind(null,1760));this.privKeyProvider=new i({config:{chainConfig:this.chainConfig}})}else{if(this.currentChainNamespace!==o.g.OTHER)throw new Error("Invalid chainNamespace: ".concat(this.currentChainNamespace," found while connecting to wallet"));this.privKeyProvider=new a.b}var n;!this.openloginInstance.privKey&&i&&(this.loginSettings.curve||(this.loginSettings.curve=this.currentChainNamespace===o.g.SOLANA?e.c.ED25519:e.c.SECP256K1),await this.openloginInstance.login(h()(this.loginSettings,{loginProvider:i.loginProvider},{extraLoginOptions:g(g({},i.extraLoginOptions||{}),{},{login_hint:i.login_hint||(null===(n=i.extraLoginOptions)||void 0===n?void 0:n.login_hint)})})));let r=this.openloginInstance.privKey;if(r){if(this.currentChainNamespace===o.g.SOLANA){const{getED25519Key:i}=await Promise.all([t.e(1),t.e(21)]).then(t.bind(null,1962));r=i(r).sk.toString("hex")}await this.privKeyProvider.setupProvider(r),this.status=o.d.CONNECTED,this.emit(o.b.CONNECTED,{adapter:o.j.OPENLOGIN,reconnected:!i})}}}}}]);
//# sourceMappingURL=22.90f141df.chunk.js.map